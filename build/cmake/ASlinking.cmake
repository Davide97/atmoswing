add_dependencies(asbase eigen)
add_dependencies(asprocessing eigen)

message(WARNING ${wxWidgets_INCLUDE_DIR})


target_link_libraries(g2clib ${PNG_LIBRARIES})
target_link_libraries(g2clib ${JASPER_LIBRARIES})
target_link_libraries(asbase g2clib)
target_link_libraries(asbase ${netCDF_LIBRARIES})
#target_link_libraries(asbase ${OPENSSL_LIBRARIES})
target_link_libraries(asbase ${CURL_LIBRARIES})
target_link_libraries(asbase ${wxWidgets_LIBRARIES})
target_link_libraries(asbase ${JPEG_LIBRARY})

if (BUILD_FORECASTER)
    target_link_libraries(asbase ${GDAL_LIBRARIES})
    add_dependencies(atmoswing-forecaster eigen)
    target_link_libraries(atmoswing-forecaster asbase)
    target_link_libraries(atmoswing-forecaster asprocessing)
    target_link_libraries(atmoswing-forecaster ${GDAL_LIBRARIES})
    if (USE_WXHGVERSION)
        target_link_libraries(atmoswing-forecaster ${WXHGVERSION_NAME})
    endif (USE_WXHGVERSION)
    if (USE_VLD)
        target_link_libraries(atmoswing-forecaster ${VLD_LIBRARIES})
    endif (USE_VLD)
endif (BUILD_FORECASTER)

if (BUILD_VIEWER)
    target_link_libraries(asbase ${GDAL_LIBRARIES})
    add_dependencies(atmoswing-viewer eigen)
    add_dependencies(atmoswing-viewer vroomgis)
    target_link_libraries(atmoswing-viewer asbase)
    target_link_libraries(atmoswing-viewer ${GDAL_LIBRARIES})
    target_link_libraries(atmoswing-viewer ${VROOMGIS_LIBRARY})
    target_link_libraries(atmoswing-viewer wxplotctrl)
    if (USE_WXHGVERSION)
        add_dependencies(atmoswing-viewer wxhgversion)
        target_link_libraries(atmoswing-viewer ${WXHGVERSION_NAME})
    endif (USE_WXHGVERSION)
    if (USE_VLD)
        target_link_libraries(atmoswing-viewer ${VLD_LIBRARIES})
    endif (USE_VLD)
    if (WIN32)
        target_link_libraries(atmoswing-viewer Psapi.lib)
    endif (WIN32)
endif (BUILD_VIEWER)

if (BUILD_OPTIMIZER)
    add_dependencies(atmoswing-optimizer eigen)
    target_link_libraries(atmoswing-optimizer asbase)
    target_link_libraries(atmoswing-optimizer asprocessing)
    if (USE_WXHGVERSION)
        target_link_libraries(atmoswing-optimizer ${WXHGVERSION_NAME})
    endif (USE_WXHGVERSION)
    if (USE_VLD)
        target_link_libraries(atmoswing-optimizer ${VLD_LIBRARIES})
    endif (USE_VLD)
    if (USE_CUDA)
        target_link_libraries(ascuda ${CUDA_CUDA_LIBRARY})
        add_dependencies(atmoswing-optimizer ascuda)
        target_link_libraries(atmoswing-optimizer ascuda)
    endif (USE_CUDA)
endif (BUILD_OPTIMIZER)

if (BUILD_TESTS)
    add_dependencies(atmoswing-tests eigen)
    add_dependencies(atmoswing-tests googletest)
    target_link_libraries(atmoswing-tests ${CURL_LIBRARIES})
    target_link_libraries(atmoswing-tests gtest gtest_main pthread)
    target_link_libraries(atmoswing-tests asbase)
    target_link_libraries(atmoswing-tests asprocessing)
    if (BUILD_FORECASTER)
        target_link_libraries(atmoswing-tests ${GDAL_LIBRARIES})
    endif (BUILD_FORECASTER)
    if (USE_VLD)
        target_link_libraries(atmoswing-tests ${VLD_LIBRARIES})
    endif (USE_VLD)
    if (USE_CUDA)
        target_link_libraries(ascuda ${CUDA_CUDA_LIBRARY})
        add_dependencies(atmoswing-tests ascuda)
        target_link_libraries(atmoswing-tests ascuda)
    endif (USE_CUDA)
endif (BUILD_TESTS)